name: Build Offical OpenWrt7621 - 2

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  CONFIG_FILE: config/*.config
  FEEDS_CONF: feeds.conf.default
  SSH_ACTIONS: false
  KMODS_IN_FIRMWARE: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id
    
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Clone Source Code
      run: |
        export WSROOT=`pwd`
        echo $WSROOT
        ls
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
           
    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
    
    #- name: SSH connection to Actions
    #  uses: csexton/debugger-action@master
    - name: CopyDtsFiles
      run: |
        cd openwrt
        cp ../config/witi.config ./.config
        ls .config -l
    
    #- name: MakeFiles
    #  run : |
    #    cd openwrt
    #    make V=99 -j1
    
    - name: Update Feeds
      run: |
        cd openwrt
        echo "::set-env name=OPENWRTROOT::$PWD"
        sed -i 's/luci.git/luci.git\;openwrt-19.07/g' feeds.conf.default
        ./scripts/feeds update -a
        
    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a
        
    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_KMODS=y" >> .config
        fi
        ## make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    #- name: CopyDtsFiles
    #  run: |
    #    cp dts/*.* openwrt/target/linux/ramips/dts/
    #    cp config/bk.config openwrt/.config -f
    #    sed -i 's/odhcpd-ipv6only //g' openwrt/include/target.mk
    #    sed -i 's/odhcp6c //g' openwrt/include/target.mk
        
    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make buildinfo
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        echo "::set-output name=status::success"
    - name: Set Environment Variable
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "::set-env name=PLATFORM::$PLATFORM"
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "::set-env name=TARGET::$TARGET"
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "::set-env name=SUBTARGET::$SUBTARGET"
        echo "::set-env name=FIRMWARE::$PWD"
        
    - name: Generate Firmware
      if: steps.compile.outputs.status == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        mkdir -p files/etc/opkg
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots/targets
            cp -r bin/targets/$TARGET files/www/snapshots/targets
            cp ../config/opkg/distfeeds-19.07-local.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        else
            cp ../config/opkg/distfeeds-19.07-remote.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        fi
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"
        echo "::set-output name=status::success"
        
    #- name: Deploy Packages-Server
    #  if: steps.generate.outputs.status == 'success'
    #  run: |
    #    mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
    #    cp -r $OPENWRTROOT/bin/packages server/web/snapshots
    #    cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
    #    mkdir -p $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
    #    cp -r server $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
    #    cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
    #    zip -q -r packages-server.zip pre-packages-server/server
        
    - name: Upload Config
      uses: actions/upload-artifact@master
      if: steps.generate.outputs.status == 'success'
      with:
        name: config.buildinfo
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.buildinfo
        
    - name: Upload Packages-Server
      uses: actions/upload-artifact@master
      if: steps.generate.outputs.status == 'success'
      with:
        name: packages-server
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-packages-server
        
    - name: Upload Images Sha256sums
      uses: actions/upload-artifact@master
      if: steps.generate.outputs.status == 'success'
      with:
        name: sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums
        
    - name: Upload Bin Directory
      uses: actions/upload-artifact@master
      if: steps.generate.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: openwrt-bin-directory${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/$TARGET/$SUBTARGET
        rm -rf packages pre-packages-server
        echo "::set-output name=status::success"
    - name: Upload Firmware Directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: openwrt-firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload Firmware To CowTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    #- name: Upload Firmware To WeTransfer
    #  if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
    #  run: |
    #    curl -fsSL git.io/file-transfer | sh
    #    ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
    #    echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
